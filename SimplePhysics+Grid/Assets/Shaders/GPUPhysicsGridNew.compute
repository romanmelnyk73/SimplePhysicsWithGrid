// Each #kernel tells which function to compile; you can have many kernels
#define CLEAR_GRID_THREAD_COUNT 8
#define PARTICLE_THREAD_COUNT 8

// Per Grid Cell	0
#pragma kernel ClearGrid

// Per Particle		1
#pragma kernel PopulateGrid

// Per Particle		2
#pragma kernel CollisionDetectionUsingGrid

// Per Particle		3
#pragma kernel CollisionDetection

// Constants
// gridStartPosition				(float3) // lower left backward corner
// gridDimensions 					(int3)
// gridMax							(int) gridDimensions.x * gridDimensions.y * gridDimensions.z * 4
// particleDiameter 				(float)
// springCoefficient 				(float) (negative) (Equation 10)
// dampingCoefficient 				(float) (Equation 11)
// tangentialCoefficient 			(float) (Equation 12)
// particleCount					(int)number of particles
// activeCount						(int) active rigid bodies

struct Particle
{
	float3 position;
	float3 velocity;
	float4 color;
	float3 force;
};

struct Voxel
{
	int4 vox1;
	int4 vox2;
};

shared RWStructuredBuffer<Particle> particlesBuffer;
shared RWStructuredBuffer<Voxel> voxelGridBuffer;

int particlesCount;
int gridMax; // gridDimensions.x * gridDimensions.y * gridDimensions.z
int3 gridDimensions;

float deltaTime;
float floorY;
float particleMass;
float particleDiameter;
float radius;
float3 gridStartPosition;
float4 limitsXZ;


#define LIMITS_MIN_X limitsXZ.x
#define LIMITS_MAX_X limitsXZ.y
#define LIMITS_MIN_Z limitsXZ.z 
#define LIMITS_MAX_Z limitsXZ.w 
#define LIMITS_MIN_Y floorY
#define LIMITS_MAX_Y -floorY


//////////////////////
// Grid Generation //
/////////////////////
// Per Grid Cell
// Use particlePositions
// to populate the
// voxelGridBuffer
// Input

[numthreads(CLEAR_GRID_THREAD_COUNT,1,1)]
void ClearGrid (uint3 id : SV_DispatchThreadID)
{
	Voxel voxel = voxelGridBuffer[id.x];
	voxel.vox1.x = voxel.vox1.y = voxel.vox1.z = voxel.vox1.w = -1;
	voxel.vox2.x = voxel.vox2.y = voxel.vox2.z = voxel.vox2.w = -1;
	voxelGridBuffer[id.x] = voxel;
}


// Returns the grid index for particle p
int GetParticleGridIndex(int id) {
	int3 gridLocation = (particlesBuffer[id].position - gridStartPosition.xyz) / particleDiameter;
	return gridLocation.x + gridDimensions.x * gridLocation.y + (gridDimensions.x * gridDimensions.y * gridLocation.z);
}

// Returns the grid location for particle p
int3 GetParticleGridLocation(int id) {
	return (particlesBuffer[id].position - gridStartPosition.xyz) / particleDiameter;
}

// Converts a grid location to a grid index
int GetGridIndex(int x, int y, int z) {
	return x + (gridDimensions.x * y) + (gridDimensions.x * gridDimensions.y * z);
}
int GetGridIndex(int3 loc) {
	return loc.x + (gridDimensions.x * loc.y) + (gridDimensions.x * gridDimensions.y * loc.z);
}

[numthreads(PARTICLE_THREAD_COUNT,1,1)]
void PopulateGrid (uint3 id : SV_DispatchThreadID)
{
	int index = GetParticleGridIndex(id.x);
	// clamp gridIndex
	if (index < gridMax && index >= 0)
	{
		Voxel voxel = voxelGridBuffer[index];
		if (voxel.vox1.x==-1){
			voxel.vox1.x = id.x;
        }else if (voxel.vox1.y==-1){
			voxel.vox1.y = id.x;
        }else if (voxel.vox1.z==-1){
			voxel.vox1.z = id.x;
        }else if (voxel.vox1.w==-1){
			voxel.vox1.w = id.x;
        }else if (voxel.vox2.x==-1){
			voxel.vox2.x = id.x;
        }else if (voxel.vox2.y==-1){
			voxel.vox2.y = id.x;
        }else if (voxel.vox2.z==-1){
			voxel.vox2.z = id.x;
        }else if (voxel.vox2.w==-1){
			voxel.vox2.w = id.x;
        }
		voxelGridBuffer[index] = voxel;
	}
}


/////////////////////////
// Collision Detection //
/////////////////////////
// Per Particle
// Use particle positions, grid and velocity to compute Particle force
// Input

float frictionCoefficient;
float gravityCoefficient;

float springCoefficient;
float dampingCoefficient;
float tangentialCoefficient;
float linearForceScalar;

float3 CollisionReaction(int j_id, int i_id)
{
	// the force on particle i after colliding with particle j is modelled as follows

	float3 force = 0;
	float3 relativePosition;
	float3 particleJVelocity;
	
	Particle particleI = particlesBuffer[i_id];

	if (j_id<0){
		float3 groundParticlePosition = particleI.position;
		groundParticlePosition.y = -particleDiameter*0.5;
		float radius = particleDiameter*0.5;
		groundParticlePosition.y = min(-radius, particleI.position.y-radius);
		relativePosition = groundParticlePosition - particleI.position;
		particleJVelocity = 0;
	}else{
		Particle particleJ = particlesBuffer[j_id];
		particleJVelocity = particleJ.velocity;
		relativePosition = particleJ.position - particleI.position; // position of j relative to i
	}
	float relativePositionMagnitude = length(relativePosition);

	if (relativePositionMagnitude < particleDiameter)
	{
		float3 relativePositionNormalized = relativePosition / relativePositionMagnitude;

		// repulsive force (Equation 10)
		float3 repulsiveForce = -springCoefficient * (particleDiameter - relativePositionMagnitude) * relativePositionNormalized;
		// damping force (Equation 11)
		// https://www2.msm.ctw.utwente.nl/sluding/PAPERS/luding_alert2008.pdf 
		// says that the damping force acts along the normal....
		// not sure whether relativeVelocity is relative to particle i's position or particle i's velocity
		// using velocity here
		float3 relativeVelocity = particleJVelocity - particleI.velocity; // not sure if correct
		float3 dampingForce = dampingCoefficient * relativeVelocity;

		// tangential force (Equation 12)
		float3 tangentialVelocity = relativeVelocity - (dot(relativeVelocity, relativePositionNormalized) * relativePositionNormalized);
		float3 tangentialForce = tangentialCoefficient * tangentialVelocity;

		force = repulsiveForce + dampingForce + tangentialForce;
	}
	return force;
}


// checks cell x,y,z for collision with i, calls CollisionReaction if so
float3 ForceFromGridCell(int i, int x, int y, int z) {
	float3 force = 0;
	if (x > -1 && y > -1 && z > -1 && x < gridDimensions.x && y < gridDimensions.y && z < gridDimensions.z) {
		int index = GetGridIndex(x, y, z);
		if (index < gridMax) {
			Voxel voxel = voxelGridBuffer[index];
			int j = voxel.vox1.x;
			if (j > -1 && j != i)
				force += CollisionReaction(j, i);
			j = voxel.vox1.y;
			if (j > -1 && j != i)
				force += CollisionReaction(j, i);
			j = voxel.vox1.z;
			if (j > -1 && j != i)
				force += CollisionReaction(j, i);
			j = voxel.vox1.w;
			if (j > -1  && j != i)
				force += CollisionReaction(j, i);
			j = voxel.vox2.x;
			if (j > -1 && j != i)
				force += CollisionReaction(j, i);
			j = voxel.vox2.y;
			if (j > -1 && j != i)
				force += CollisionReaction(j, i);
			j = voxel.vox2.z;
			if (j > -1 && j != i)
				force += CollisionReaction(j, i);
			j = voxel.vox2.w;
			if (j > -1  && j != i)
				force += CollisionReaction(j, i);
		}
	}

	return force;
}

 
 float3 CollisionPosition(int j_id, int i_id)
 {
 	float3 normal;
 	float3 relativeVelocity;
 	float particleDiameter = 2 * radius;

 	Particle particle1 = particlesBuffer[ (uint)i_id ];

 	Particle particle2 = particlesBuffer[ (uint)j_id ];

 	normal = particle1.position - particle2.position;
 	//normal = particle2.position - particle1.position;
	
 	const float distance = length(normal);

 	if ( distance < particleDiameter ) {

 		normal *= 0.5 * (distance - particleDiameter);
 	}else{
 		normal = 0.0;
 	}
 	return normal;
 }

 float3 CollisionVelocity(int j_id, int i_id)
 {
 	float3 normal;
 	float3 relativeVelocity;
 	float particleDiameter = 2 * radius;

 	Particle particle1 = particlesBuffer[ (uint)i_id ];

 	Particle particle2 = particlesBuffer[ (uint)j_id ];

 	normal = particle1.position - particle2.position;
 	//normal = particle2.position - particle1.position;
	
 	const float distance = length(normal);

 	if ( distance < particleDiameter ) {

 		normal *= 0.5 * (distance - particleDiameter);
	
 		normal = normalize(normal);

 		relativeVelocity = particle1.velocity - particle2.velocity;
 		//relativeVelocity = particle2.velocity - particle1.velocity;

 		normal *= dot( relativeVelocity, normal );

 	}else{
 		normal = 0.0f;
 		}
 	return normal;
 }


 /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 [numthreads(PARTICLE_THREAD_COUNT,1,1)]
 void CollisionDetectionUsingGrid(uint3 id : SV_DispatchThreadID)
 {
	 Particle particle = particlesBuffer[id.x];

	 particle.position += particle.velocity * deltaTime;

	 if (particle.position.x < LIMITS_MIN_X || particle.position.x > LIMITS_MAX_X) {

		 particle.position.x = clamp(particle.position.x, LIMITS_MIN_X, LIMITS_MAX_X);
		 particle.velocity.x = -particle.velocity.x;

	 }

	 // if ( particle.position.y < LIMITS_MIN_Y ) {

	 // 	particle.position.y = LIMITS_MIN_Y;
	 if (particle.position.y < LIMITS_MIN_Y || particle.position.y > LIMITS_MAX_Y) {

		 particle.position.y = clamp(particle.position.y, LIMITS_MIN_Y, LIMITS_MAX_Y);

		 particle.velocity.xz *= 0.96;
		 particle.velocity.y = -particle.velocity.y * 0.8;

	 }

	 if (particle.position.z < LIMITS_MIN_Z || particle.position.z > LIMITS_MAX_Z) {

		 particle.position.z = clamp(particle.position.z, LIMITS_MIN_Z, LIMITS_MAX_Z);
		 particle.velocity.z = -particle.velocity.z;

	 }

	 //float3 force = CollisionReaction(-1, id.x);
	 float3 force = 0;

	 int3 loc = GetParticleGridLocation(id.x);

	 for (int x = loc.x - 1; x <= loc.x + 1; x++) {
		 for (int y = loc.y - 1; y <= loc.y + 1; y++) {
			 for (int z = loc.z - 1; z <= loc.z + 1; z++) {
				 force += ForceFromGridCell(id.x, x, y, z);
			 }
		 }
	 }

	 force.y -= gravityCoefficient;

	 particle.force = force;

	 float threshold = 1.0 / pow(10.0, 6);

	 particle.velocity /= 1.0 + deltaTime * frictionCoefficient;
	 particle.velocity += linearForceScalar * deltaTime * force * particleMass;

	 if (length(particle.velocity) < threshold) {
		 particle.velocity = 0;
	 }

	 /*particle.velocity.xz *= 0.98;
	 particle.velocity.y -= 9.8 * deltaTime;*/

	 particle.position += particle.velocity * deltaTime;

	 particlesBuffer[id.x] = particle;

 }

//////////////////////////////////////////////////////////////////////////////////////////
	 [numthreads(PARTICLE_THREAD_COUNT, 1, 1)]
	 void CollisionDetection(uint3 id : SV_DispatchThreadID)
	 {
		Particle particle = particlesBuffer[id.x];

		particle.position += particle.velocity * deltaTime;

		if (particle.position.x < LIMITS_MIN_X || particle.position.x > LIMITS_MAX_X) {

			particle.position.x = clamp(particle.position.x, LIMITS_MIN_X, LIMITS_MAX_X);
			particle.velocity.x = -particle.velocity.x;

		}

		// if ( particle.position.y < LIMITS_MIN_Y ) {

		// 	particle.position.y = LIMITS_MIN_Y;
		if (particle.position.y < LIMITS_MIN_Y || particle.position.y > LIMITS_MAX_Y) {

			particle.position.y = clamp(particle.position.y, LIMITS_MIN_Y, LIMITS_MAX_Y);

			particle.velocity.xz *= 0.96;
			particle.velocity.y = -particle.velocity.y * 0.8;

		}

		if (particle.position.z < LIMITS_MIN_Z || particle.position.z > LIMITS_MAX_Z) {

			particle.position.z = clamp(particle.position.z, LIMITS_MIN_Z, LIMITS_MAX_Z);
			particle.velocity.z = -particle.velocity.z;

		}

		float3 force = 0;

		for(int i=0; i<particlesCount; i++){
		 if (i==(int)id.x) continue;
		 force += CollisionReaction(i, id.x);

	 }

		force.y -= gravityCoefficient;

		particle.force = force;

		float threshold = 1.0 / pow(10.0, 6);

		particle.velocity /= 1.0 + deltaTime * frictionCoefficient;
		particle.velocity += linearForceScalar * deltaTime * force * particleMass;

		if (length(particle.velocity) < threshold) {
			particle.velocity = 0;
		}

		
		//particle.position += particle.velocity * deltaTime;

		particlesBuffer[id.x] = particle;
 }


