#pragma kernel CSMain
#define GROUP_SIZE 256
#define PI2 6.28318530718

struct Particle
{
	float3 position;
	float3 velocity;
	float4 color;
};

RWStructuredBuffer<Particle> particlesBuffer;

float deltaTime;
int particlesCount;
float radius;
float4 limitsXZ;
float floorY;

#define LIMITS_MIN_X limitsXZ.x
#define LIMITS_MAX_X limitsXZ.y
#define LIMITS_MIN_Z limitsXZ.z
#define LIMITS_MAX_Z limitsXZ.w
#define LIMITS_MIN_Y floorY

[numthreads(GROUP_SIZE,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	Particle particle = particlesBuffer[id.x];

	particle.position += particle.velocity * deltaTime;
	
	// keep objects inside room
	if ( particle.position.x < LIMITS_MIN_X || particle.position.x > LIMITS_MAX_X ) {

		particle.position.x = clamp( particle.position.x, LIMITS_MIN_X, LIMITS_MAX_X );
		particle.velocity.x = - particle.velocity.x;

	}

	if ( particle.position.y < LIMITS_MIN_Y ) {

		particle.position.y = LIMITS_MIN_Y;

		particle.velocity.xz *= 0.96;
		particle.velocity.y = - particle.velocity.y * 0.8;

	}

	if ( particle.position.z < LIMITS_MIN_Z || particle.position.z > LIMITS_MAX_Z ) {

		particle.position.z = clamp( particle.position.z, LIMITS_MIN_Z, LIMITS_MAX_Z );
		particle.velocity.z = - particle.velocity.z;

	}

	float3 normal;
	float3 relativeVelocity;

	for ( int i = id.x + 1; i < particlesCount; i ++ ) {
		Particle particle2 = particlesBuffer[ (uint)i ];

		normal = particle.position - particle2.position;
		
		const float distance = length(normal);

		if ( distance < 2 * radius ) {

			normal *= 0.5 * distance - radius;

			particle.position -= normal;
			
			normal = normalize(normal);

			relativeVelocity = particle.velocity - particle2.velocity;

			normal *= dot( relativeVelocity, normal );

			particle.velocity -= normal;
		}

	}

	particle.velocity.xz *= 0.98;
	particle.velocity.y -= 9.8 * deltaTime;

	particlesBuffer[id.x] = particle;
}


